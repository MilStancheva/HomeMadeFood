<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CostMinValueErrorMessage" xml:space="preserve">
    <value>Cost should be a non negative number</value>
  </data>
  <data name="DateIsRequiredErrorMessage" xml:space="preserve">
    <value>Please, choose a date</value>
  </data>
  <data name="DescriptionIsRequiredErrorMessage" xml:space="preserve">
    <value>Description is required</value>
  </data>
  <data name="DescriptionMinLengthErrorMessage" xml:space="preserve">
    <value>Description should be at least 10 symbols</value>
  </data>
  <data name="FoodTypeIsRequiredErrorMessage" xml:space="preserve">
    <value>Food type is required</value>
  </data>
  <data name="HomeMadeFoodTitle" xml:space="preserve">
    <value>HomeMade Food</value>
  </data>
  <data name="IndexMakeYourEmployeesHappy" xml:space="preserve">
    <value>Make your employees happy and order them lunch!</value>
  </data>
  <data name="IndexTryIt" xml:space="preserve">
    <value>Try it out now.</value>
  </data>
  <data name="IndexWeAreHereToMakeYourDay" xml:space="preserve">
    <value>We are here to make your day in the office joyful, to help you enjoy delicious meals prepared just like at home.</value>
  </data>
  <data name="IngredientQuantityMinValueErrorMessage" xml:space="preserve">
    <value>Quantity in measuring unit of the ingredient should be a positive number</value>
  </data>
  <data name="InstructionIsRequiredErrorMessage" xml:space="preserve">
    <value>Instruction is required</value>
  </data>
  <data name="InstructionMinLengthErrorMessage" xml:space="preserve">
    <value>Instruction should be at least 10 symbols</value>
  </data>
  <data name="MeasuringUnitIsRequiredErrorMessage" xml:space="preserve">
    <value>Measuring unit is required</value>
  </data>
  <data name="NameIsRequiredErrorMessage" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="NameMaxValueErrorMessage" xml:space="preserve">
    <value>Name should be maximum 50 symbols</value>
  </data>
  <data name="NameMinValueErrorMessage" xml:space="preserve">
    <value>Name should be at least 2 symbols</value>
  </data>
  <data name="OrderYourLunchLink" xml:space="preserve">
    <value>Order Your Lunch</value>
  </data>
  <data name="PriceIsRequiredErrorMessage" xml:space="preserve">
    <value>Price per measuring unit is required</value>
  </data>
  <data name="PriceMinValueErrorMessage" xml:space="preserve">
    <value>Price per measuring unit should be a positive number</value>
  </data>
  <data name="QuantityMinValueErrorMessage" xml:space="preserve">
    <value>Quantity should be a non negative number</value>
  </data>
  <data name="RegisterLink" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="TitleIsRequiredErrorMessage" xml:space="preserve">
    <value>Title is required</value>
  </data>
  <data name="TitleMaxValueErrorMessage" xml:space="preserve">
    <value>Title should be maximum 50 symbols</value>
  </data>
  <data name="TitleMinValueErrorMessage" xml:space="preserve">
    <value>Title should be at least 2 symbols</value>
  </data>
  <data name="ToastrAddDailyMenuFailureMessage" xml:space="preserve">
    <value>Ooops! Daily Menu for {0:dd/MM/yyyy} could not be added. Please check again the input data. Thanks!</value>
  </data>
  <data name="ToastrAddDailyMenuSuccessMessage" xml:space="preserve">
    <value>Daily Menu for {0:dd/MM/yyyy} is successfully added</value>
  </data>
  <data name="ToastrAddObjectFailureMessage" xml:space="preserve">
    <value>Ooops! {0} could not be added. Please check again the input data. Thanks!</value>
  </data>
  <data name="ToastrAddObjectSuccessMessage" xml:space="preserve">
    <value>{0} is successfully added</value>
  </data>
  <data name="ToastrDeleteDailyMenuFailureMessage" xml:space="preserve">
    <value>Ooops! Daily Menu for {0:dd/MM/yyyy} could not be deleted.</value>
  </data>
  <data name="ToastrDeleteDailyMenuSuccessMessage" xml:space="preserve">
    <value>Daily Menu for {0:dd/MM/yyyy} is successfully deleted</value>
  </data>
  <data name="ToastrDeleteObjectFailureMessage" xml:space="preserve">
    <value>Ooops! {0} could not be deleted.</value>
  </data>
  <data name="ToastrDeleteObjectSuccessMessage" xml:space="preserve">
    <value>{0} is successfully deleted</value>
  </data>
  <data name="ToastrFailureTitle" xml:space="preserve">
    <value>Something went wrong...</value>
  </data>
  <data name="ToastrUpdateDailyMenuFailureMessage" xml:space="preserve">
    <value>Ooops! Daily Menu for {0:dd/MM/yyyy} could not be updated. Please check again the input data. Thanks!</value>
  </data>
  <data name="ToastrUpdateObjectFailureMessage" xml:space="preserve">
    <value>Ooops! {0} could not be updated. Please check again the input data. Thanks!</value>
  </data>
  <data name="ToastrUpdateObjectSuccessMessage" xml:space="preserve">
    <value>{0} is successfully updated</value>
  </data>
  <data name="ТoastrSuccessTitle" xml:space="preserve">
    <value>Yeah!</value>
  </data>
  <data name="ТoastrUpdateDailyMenuSuccessMessage" xml:space="preserve">
    <value>Daily Menu for {0:dd/MM/yyyy} is successfully updated</value>
  </data>
</root>